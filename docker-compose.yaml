version: '3.1'

volumes:
    postgres_data: {}
    prometheus_data: {}
    grafana_data: {}
    worker_data:
    redis_data:

networks:
  front-tier:
  back-tier:

services:
    redis:
        image: 'redis:3.2.7'
        # command: redis-server --requirepass redispass

#    postgres:
#        image: postgres:9.6
#        environment:
#            - POSTGRES_USER=airflow
#            - POSTGRES_PASSWORD=airflow
#            - POSTGRES_DB=airflow

        # Uncomment these lines to persist data on the local filesystem.
        #     - PGDATA=/var/lib/postgresql/data/pgdata
#        volumes:
        #     - ./pgdata:/var/lib/postgresql/data/pgdata
#            - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql

    postgres:
      image: postgres:9.6
      restart: unless-stopped
      environment:
        - POSTGRES_USER=airflow
        - POSTGRES_PASSWORD=airflow
        - POSTGRES_DB=airflow
      labels:
        io.astronomer.docker: "true"
        io.astronomer.docker.open: "true"
      ports:
        - "5432:5432"
      volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    project:
        build:
            context: ./project
            dockerfile: Dockerfile
    webserver:
        build:
          context: ./airflow
          dockerfile: Dockerfile
        restart: always
        depends_on:
            - project
            - postgres
            - redis
        environment:
            - LOAD_EX=n
            - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - EXECUTOR=Celery
            # - POSTGRES_USER=airflow
            # - POSTGRES_PASSWORD=airflow
            # - POSTGRES_DB=airflow
            # - REDIS_PASSWORD=redispass
        volumes:
            - ./dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            - ./plugins:/usr/local/airflow/plugins
        ports:
            - "8080:8080"
        command: webserver
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3

    flower:
        image: puckel/docker-airflow:1.10.0-2
        restart: always
        depends_on:
            - redis
        environment:
            - EXECUTOR=Celery
            # - REDIS_PASSWORD=redispass
        ports:
            - "5555:5555"
        command: flower

    scheduler:
        image: puckel/docker-airflow:1.10.0-2
        restart: always
        depends_on:
            - webserver
        volumes:
            - ./dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            # - ./plugins:/usr/local/airflow/plugins
        environment:
            - LOAD_EX=n
            - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - EXECUTOR=Celery
            # - POSTGRES_USER=airflow
            # - POSTGRES_PASSWORD=airflow
            # - POSTGRES_DB=airflow
            # - REDIS_PASSWORD=redispass
        command: scheduler

    worker:
        image: puckel/docker-airflow:1.10.0-2
        restart: always
        depends_on:
            - scheduler
        volumes:
            - ./dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            # - ./plugins:/usr/local/airflow/plugins
        environment:
            - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - EXECUTOR=Celery
            # - POSTGRES_USER=airflow
            # - POSTGRES_PASSWORD=airflow
            # - POSTGRES_DB=airflow
            # - REDIS_PASSWORD=redispass
        command: worker

    node-exporter:
      image: prom/node-exporter
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
      command:
        - '--path.procfs=/host/proc'
        - '--path.sysfs=/host/sys'
        - --collector.filesystem.ignored-mount-points
        - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
      ports:
        - 9100:9100
      networks:
        - back-tier
      restart: always
      deploy:
        mode: global

    alertmanager:
      image: prom/alertmanager
      ports:
        - 9093:9093
      volumes:
        - ./alertmanager/:/etc/alertmanager/
      networks:
        - back-tier
      restart: always
      command:
        - '--config.file=/etc/alertmanager/config.yml'
        - '--storage.path=/alertmanager'
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}
    cadvisor:
      image: google/cadvisor
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      ports:
        - 8090:8090
      networks:
      - back-tier
      restart: always
      deploy:
        mode: global

    prometheus:
      build:
        context: ./prometheus
        dockerfile: Dockerfile

      volumes:
        - ./prometheus/:/etc/prometheus/
        - prometheus_data:/prometheus
      environment:
        - "AIRFLOW_PROMETHEUS_DATABASE_HOST=postgres.airflow.lan"
        - "AIRFLOW_PROMETHEUS_DATABASE_BACKEND=postgres"
      #  - "AIRFLOW_PROMETHEUS_DATABASE_HOST=localhost"
      #  - "AIRFLOW_PROMETHEUS_DATABASE_PORT=5432"
      #  - "AIRFLOW_PROMETHEUS_DATABASE_USER=airflow"
      #  - "AIRFLOW_PROMETHEUS_DATABASE_PASSWORD=airflow"
      #  - "AIRFLOW_PROMETHEUS_DATABASE_NAME=airflow"
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
      ports:
        - 9090:9090
      links:
        - cadvisor:cadvisor
        - alertmanager:alertmanager
      depends_on:
        - project
        - cadvisor
      networks:
        - back-tier
      restart: always


    grafana:
      image: grafana/grafana
      user: "104"
      depends_on:
        - prometheus
      ports:
        - 3000:3000
      volumes:
        - grafana_data:/var/lib/grafana
        - ./grafana/provisioning/:/etc/grafana/provisioning/
      env_file:
        - ./grafana/config.monitoring
      networks:
        - back-tier
        - front-tier
      restart: always
